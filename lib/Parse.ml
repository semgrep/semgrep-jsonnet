(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_jsonnet"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "self", None;
  "string_content", None;
  "double", None;
  "true", None;
  "local", None;
  "null", None;
  "unaryop",
  Some (
    Alt [|
      Token (Literal "-");
      Token (Literal "+");
      Token (Literal "!");
      Token (Literal "~");
    |];
  );
  "comment", None;
  "dollar", None;
  "number", None;
  "single", None;
  "string_end", None;
  "imm_tok_prec_p1_pat_c7f65b4", None;
  "ident", None;
  "semgrep_ellipsis", None;
  "false", None;
  "string_start", None;
  "super", None;
  "escape_sequence", None;
  "imm_tok_prec_p1_pat_59587ce", None;
  "tailstrict", None;
  "semgrep_metavariable", None;
  "str_double",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "imm_tok_prec_p1_pat_c7f65b4");
        Token (Name "escape_sequence");
      |];
    );
  );
  "str_single",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "imm_tok_prec_p1_pat_59587ce");
        Token (Name "escape_sequence");
      |];
    );
  );
  "id",
  Some (
    Alt [|
      Token (Name "ident");
      Token (Name "semgrep_metavariable");
    |];
  );
  "string",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Literal "@");
        );
        Token (Name "single");
        Token (Name "single");
      ];
      Seq [
        Opt (
          Token (Literal "@");
        );
        Token (Name "single");
        Token (Name "str_single");
        Token (Name "single");
      ];
      Seq [
        Opt (
          Token (Literal "@");
        );
        Token (Name "double");
        Token (Name "double");
      ];
      Seq [
        Opt (
          Token (Literal "@");
        );
        Token (Name "double");
        Token (Name "str_double");
        Token (Name "double");
      ];
      Seq [
        Opt (
          Token (Literal "@");
        );
        Token (Name "string_start");
        Token (Name "string_content");
        Token (Name "string_end");
      ];
    |];
  );
  "import",
  Some (
    Seq [
      Token (Literal "import");
      Token (Name "string");
    ];
  );
  "importstr",
  Some (
    Seq [
      Token (Literal "importstr");
      Token (Name "string");
    ];
  );
  "anonymous_function",
  Some (
    Seq [
      Token (Literal "function");
      Token (Literal "(");
      Opt (
        Token (Name "params");
      );
      Token (Literal ")");
      Token (Name "expr");
    ];
  );
  "args",
  Some (
    Alt [|
      Seq [
        Token (Name "expr");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "expr");
          ];
        );
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "named_argument");
          ];
        );
        Opt (
          Token (Literal ",");
        );
      ];
      Seq [
        Token (Name "named_argument");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "named_argument");
          ];
        );
        Opt (
          Token (Literal ",");
        );
      ];
    |];
  );
  "assert",
  Some (
    Seq [
      Token (Literal "assert");
      Token (Name "expr");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "expr");
        ];
      );
    ];
  );
  "binary_expr",
  Some (
    Alt [|
      Seq [
        Token (Name "expr");
        Alt [|
          Token (Literal "*");
          Token (Literal "/");
          Token (Literal "%");
        |];
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
        |];
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Alt [|
          Token (Literal "<<");
          Token (Literal ">>");
        |];
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Alt [|
          Token (Literal "<");
          Token (Literal "<=");
          Token (Literal ">");
          Token (Literal ">=");
        |];
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
        |];
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Token (Literal "&");
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Token (Literal "^");
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Token (Literal "|");
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Token (Literal "&&");
        Token (Name "expr");
      ];
      Seq [
        Token (Name "expr");
        Token (Literal "||");
        Token (Name "expr");
      ];
    |];
  );
  "bind",
  Some (
    Alt [|
      Seq [
        Token (Name "id");
        Token (Literal "=");
        Token (Name "expr");
      ];
      Seq [
        Token (Name "id");
        Token (Literal "(");
        Opt (
          Token (Name "params");
        );
        Token (Literal ")");
        Token (Literal "=");
        Token (Name "expr");
      ];
    |];
  );
  "compspec",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "forspec");
        Token (Name "ifspec");
      |];
    );
  );
  "deep_ellipsis",
  Some (
    Seq [
      Token (Literal "<...");
      Token (Name "expr");
      Token (Literal "...>");
    ];
  );
  "expr",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Token (Name "deep_ellipsis");
      Alt [|
        Token (Name "null");
        Token (Name "true");
        Token (Name "false");
        Token (Name "self");
        Token (Name "dollar");
        Token (Name "string");
        Token (Name "number");
        Seq [
          Token (Literal "{");
          Opt (
            Alt [|
              Seq [
                Token (Name "member");
                Repeat (
                  Seq [
                    Token (Literal ",");
                    Token (Name "member");
                  ];
                );
                Opt (
                  Token (Literal ",");
                );
              ];
              Seq [
                Repeat (
                  Seq [
                    Token (Name "objlocal");
                    Token (Literal ",");
                  ];
                );
                Token (Literal "[");
                Token (Name "expr");
                Token (Literal "]");
                Token (Literal ":");
                Token (Name "expr");
                Repeat (
                  Seq [
                    Token (Literal ",");
                    Token (Name "objlocal");
                  ];
                );
                Opt (
                  Token (Literal ",");
                );
                Token (Name "forspec");
                Opt (
                  Token (Name "compspec");
                );
              ];
            |];
          );
          Token (Literal "}");
        ];
        Seq [
          Token (Literal "[");
          Opt (
            Seq [
              Token (Name "expr");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "expr");
                ];
              );
              Opt (
                Token (Literal ",");
              );
            ];
          );
          Token (Literal "]");
        ];
        Seq [
          Token (Literal "[");
          Token (Name "expr");
          Opt (
            Token (Literal ",");
          );
          Token (Name "forspec");
          Opt (
            Token (Name "compspec");
          );
          Token (Literal "]");
        ];
        Seq [
          Token (Name "expr");
          Token (Literal ".");
          Token (Name "id");
        ];
        Seq [
          Token (Name "super");
          Token (Literal ".");
          Token (Name "id");
        ];
        Seq [
          Token (Name "expr");
          Token (Literal "[");
          Opt (
            Token (Name "expr");
          );
          Opt (
            Seq [
              Token (Literal ":");
              Opt (
                Token (Name "expr");
              );
              Opt (
                Seq [
                  Token (Literal ":");
                  Opt (
                    Token (Name "expr");
                  );
                ];
              );
            ];
          );
          Token (Literal "]");
        ];
        Seq [
          Token (Name "super");
          Token (Literal "[");
          Token (Name "expr");
          Token (Literal "]");
        ];
        Seq [
          Token (Name "expr");
          Token (Literal "(");
          Opt (
            Token (Name "args");
          );
          Token (Literal ")");
          Opt (
            Token (Name "tailstrict");
          );
        ];
        Token (Name "id");
        Token (Name "local_bind");
        Seq [
          Token (Literal "if");
          Token (Name "expr");
          Token (Literal "then");
          Token (Name "expr");
          Opt (
            Seq [
              Token (Literal "else");
              Token (Name "expr");
            ];
          );
        ];
        Token (Name "binary_expr");
        Seq [
          Token (Name "unaryop");
          Token (Name "expr");
        ];
        Seq [
          Token (Name "expr");
          Token (Literal "{");
          Alt [|
            Seq [
              Token (Name "member");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "member");
                ];
              );
              Opt (
                Token (Literal ",");
              );
            ];
            Seq [
              Repeat (
                Seq [
                  Token (Name "objlocal");
                  Token (Literal ",");
                ];
              );
              Token (Literal "[");
              Token (Name "expr");
              Token (Literal "]");
              Token (Literal ":");
              Token (Name "expr");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "objlocal");
                ];
              );
              Opt (
                Token (Literal ",");
              );
              Token (Name "forspec");
              Opt (
                Token (Name "compspec");
              );
            ];
          |];
          Token (Literal "}");
        ];
        Token (Name "anonymous_function");
        Seq [
          Token (Name "assert");
          Token (Literal ";");
          Token (Name "expr");
        ];
        Token (Name "import");
        Token (Name "importstr");
        Token (Name "expr_error");
        Seq [
          Token (Name "expr");
          Token (Literal "in");
          Token (Name "super");
        ];
        Seq [
          Token (Literal "(");
          Token (Name "expr");
          Token (Literal ")");
        ];
      |];
    |];
  );
  "expr_error",
  Some (
    Seq [
      Token (Literal "error");
      Token (Name "expr");
    ];
  );
  "field",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Alt [|
        Seq [
          Token (Name "fieldname");
          Opt (
            Token (Literal "+");
          );
          Alt [|
            Token (Literal ":");
            Token (Literal "::");
            Token (Literal ":::");
          |];
          Token (Name "expr");
        ];
        Seq [
          Token (Name "fieldname");
          Token (Literal "(");
          Opt (
            Token (Name "params");
          );
          Token (Literal ")");
          Alt [|
            Token (Literal ":");
            Token (Literal "::");
            Token (Literal ":::");
          |];
          Token (Name "expr");
        ];
      |];
    |];
  );
  "fieldname",
  Some (
    Alt [|
      Token (Name "id");
      Token (Name "string");
      Seq [
        Token (Literal "[");
        Token (Name "expr");
        Token (Literal "]");
      ];
    |];
  );
  "forspec",
  Some (
    Seq [
      Token (Literal "for");
      Token (Name "id");
      Token (Literal "in");
      Token (Name "expr");
    ];
  );
  "ifspec",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "expr");
    ];
  );
  "local_bind",
  Some (
    Seq [
      Token (Name "local");
      Token (Name "bind");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "bind");
        ];
      );
      Token (Literal ";");
      Token (Name "expr");
    ];
  );
  "member",
  Some (
    Alt [|
      Token (Name "objlocal");
      Token (Name "assert");
      Token (Name "field");
    |];
  );
  "named_argument",
  Some (
    Seq [
      Token (Name "id");
      Token (Literal "=");
      Token (Name "expr");
    ];
  );
  "objlocal",
  Some (
    Seq [
      Token (Name "local");
      Token (Name "bind");
    ];
  );
  "param",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Seq [
        Token (Name "id");
        Opt (
          Seq [
            Token (Literal "=");
            Token (Name "expr");
          ];
        );
      ];
    |];
  );
  "params",
  Some (
    Seq [
      Token (Name "param");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "param");
        ];
      );
      Opt (
        Token (Literal ",");
      );
    ];
  );
  "document", Some (Token (Name "expr"););
]

let trans_self ((kind, body) : mt) : CST.self =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_content ((kind, body) : mt) : CST.string_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_double ((kind, body) : mt) : CST.double =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_local ((kind, body) : mt) : CST.local =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unaryop ((kind, body) : mt) : CST.unaryop =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `PLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `BANG (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `TILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_dollar ((kind, body) : mt) : CST.dollar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number ((kind, body) : mt) : CST.number =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_single ((kind, body) : mt) : CST.single =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_end ((kind, body) : mt) : CST.string_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_pat_c7f65b4 ((kind, body) : mt) : CST.imm_tok_prec_p1_pat_c7f65b4 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ident ((kind, body) : mt) : CST.ident =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_start ((kind, body) : mt) : CST.string_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_super ((kind, body) : mt) : CST.super =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_pat_59587ce ((kind, body) : mt) : CST.imm_tok_prec_p1_pat_59587ce =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_tailstrict ((kind, body) : mt) : CST.tailstrict =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_str_double ((kind, body) : mt) : CST.str_double =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Imm_tok_prec_p1_pat_c7f65b4 (
                trans_imm_tok_prec_p1_pat_c7f65b4 (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Esc_seq (
                trans_escape_sequence (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_str_single ((kind, body) : mt) : CST.str_single =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Imm_tok_prec_p1_pat_59587ce (
                trans_imm_tok_prec_p1_pat_59587ce (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Esc_seq (
                trans_escape_sequence (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_id ((kind, body) : mt) : CST.id =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_ident (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_AT_single_single (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_single (Run.matcher_token v1),
                  trans_single (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Opt_AT_single_str_single_single (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_single (Run.matcher_token v1),
                  trans_str_single (Run.matcher_token v2),
                  trans_single (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Opt_AT_double_double (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_double (Run.matcher_token v1),
                  trans_double (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Opt_AT_double_str_double_double (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_double (Run.matcher_token v1),
                  trans_str_double (Run.matcher_token v2),
                  trans_double (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Opt_AT_str_start_str_content_str_end (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_string_start (Run.matcher_token v1),
                  trans_string_content (Run.matcher_token v2),
                  trans_string_end (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import ((kind, body) : mt) : CST.import =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_string_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_importstr ((kind, body) : mt) : CST.importstr =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_string_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_anonymous_function ((kind, body) : mt) : CST.anonymous_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_params (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_expr (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_args ((kind, body) : mt) : CST.args =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Expr_rep_COMMA_expr_rep_COMMA_named_arg_opt_COMMA (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_expr (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expr (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_named_argument (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                  ,
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v3
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Named_arg_rep_COMMA_named_arg_opt_COMMA (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_named_argument (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_named_argument (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assert_ ((kind, body) : mt) : CST.assert_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expr (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expr (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expr ((kind, body) : mt) : CST.binary_expr =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Expr_choice_STAR_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `PERC (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Expr_choice_PLUS_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Expr_choice_LTLT_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `LTLT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `GTGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Expr_choice_LT_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Expr_choice_EQEQ_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Expr_AMP_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Expr_HAT_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Expr_BAR_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Expr_AMPAMP_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Expr_BARBAR_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expr (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bind ((kind, body) : mt) : CST.bind =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id_EQ_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_id (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Id_LPAR_opt_params_RPAR_EQ_expr (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  trans_id (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_params (Run.matcher_token v))
                    v2
                  ,
                  Run.trans_token (Run.matcher_token v3),
                  Run.trans_token (Run.matcher_token v4),
                  trans_expr (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compspec ((kind, body) : mt) : CST.compspec =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Fors (
                trans_forspec (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Ifspec (
                trans_ifspec (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

and trans_deep_ellipsis ((kind, body) : mt) : CST.deep_ellipsis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expr (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expr ((kind, body) : mt) : CST.expr =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Deep_ellips (
            trans_deep_ellipsis (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Choice_null (
            (match v with
            | Alt (0, v) ->
                `Null (
                  trans_null (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `True (
                  trans_true_ (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `False (
                  trans_false_ (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Self (
                  trans_self (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Dollar (
                  trans_dollar (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `LCURL_opt_choice_member_rep_COMMA_member_opt_COMMA_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Member_rep_COMMA_member_opt_COMMA (
                                  (match v with
                                  | Seq [v0; v1; v2] ->
                                      (
                                        trans_member (Run.matcher_token v0),
                                        Run.repeat
                                          (fun v ->
                                            (match v with
                                            | Seq [v0; v1] ->
                                                (
                                                  Run.trans_token (Run.matcher_token v0),
                                                  trans_member (Run.matcher_token v1)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                          v1
                                        ,
                                        Run.opt
                                          (fun v -> Run.trans_token (Run.matcher_token v))
                                          v2
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Rep_objl_COMMA_LBRACK_expr_RBRACK_COLON_expr_rep_COMMA_objl_opt_COMMA_fors_opt_comp (
                                  (match v with
                                  | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9] ->
                                      (
                                        Run.repeat
                                          (fun v ->
                                            (match v with
                                            | Seq [v0; v1] ->
                                                (
                                                  trans_objlocal (Run.matcher_token v0),
                                                  Run.trans_token (Run.matcher_token v1)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                          v0
                                        ,
                                        Run.trans_token (Run.matcher_token v1),
                                        trans_expr (Run.matcher_token v2),
                                        Run.trans_token (Run.matcher_token v3),
                                        Run.trans_token (Run.matcher_token v4),
                                        trans_expr (Run.matcher_token v5),
                                        Run.repeat
                                          (fun v ->
                                            (match v with
                                            | Seq [v0; v1] ->
                                                (
                                                  Run.trans_token (Run.matcher_token v0),
                                                  trans_objlocal (Run.matcher_token v1)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                          v6
                                        ,
                                        Run.opt
                                          (fun v -> Run.trans_token (Run.matcher_token v))
                                          v7
                                        ,
                                        trans_forspec (Run.matcher_token v8),
                                        Run.opt
                                          (fun v -> trans_compspec (Run.matcher_token v))
                                          v9
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (8, v) ->
                `LBRACK_opt_expr_rep_COMMA_expr_opt_COMMA_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  trans_expr (Run.matcher_token v0),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            trans_expr (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v1
                                  ,
                                  Run.opt
                                    (fun v -> Run.trans_token (Run.matcher_token v))
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (9, v) ->
                `LBRACK_expr_opt_COMMA_fors_opt_comp_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expr (Run.matcher_token v1),
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v2
                        ,
                        trans_forspec (Run.matcher_token v3),
                        Run.opt
                          (fun v -> trans_compspec (Run.matcher_token v))
                          v4
                        ,
                        Run.trans_token (Run.matcher_token v5)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (10, v) ->
                `Expr_DOT_id (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_expr (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_id (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (11, v) ->
                `Super_DOT_id (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_super (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_id (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (12, v) ->
                `Expr_LBRACK_opt_expr_opt_COLON_opt_expr_opt_COLON_opt_expr_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        trans_expr (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        Run.opt
                          (fun v -> trans_expr (Run.matcher_token v))
                          v2
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  Run.opt
                                    (fun v -> trans_expr (Run.matcher_token v))
                                    v1
                                  ,
                                  Run.opt
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            Run.opt
                                              (fun v -> trans_expr (Run.matcher_token v))
                                              v1
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v3
                        ,
                        Run.trans_token (Run.matcher_token v4)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (13, v) ->
                `Super_LBRACK_expr_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        trans_super (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_expr (Run.matcher_token v2),
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (14, v) ->
                `Expr_LPAR_opt_args_RPAR_opt_tail (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        trans_expr (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        Run.opt
                          (fun v -> trans_args (Run.matcher_token v))
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3),
                        Run.opt
                          (fun v -> trans_tailstrict (Run.matcher_token v))
                          v4
                      )
                  | _ -> assert false
                  )
                )
            | Alt (15, v) ->
                `Id (
                  trans_id (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Local_bind (
                  trans_local_bind (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `If_expr_then_expr_opt_else_expr (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expr (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2),
                        trans_expr (Run.matcher_token v3),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_expr (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v4
                      )
                  | _ -> assert false
                  )
                )
            | Alt (18, v) ->
                `Bin_expr (
                  trans_binary_expr (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Unar_expr (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_unaryop (Run.matcher_token v0),
                        trans_expr (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (20, v) ->
                `Expr_LCURL_choice_member_rep_COMMA_member_opt_COMMA_RCURL (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        trans_expr (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        (match v2 with
                        | Alt (0, v) ->
                            `Member_rep_COMMA_member_opt_COMMA (
                              (match v with
                              | Seq [v0; v1; v2] ->
                                  (
                                    trans_member (Run.matcher_token v0),
                                    Run.repeat
                                      (fun v ->
                                        (match v with
                                        | Seq [v0; v1] ->
                                            (
                                              Run.trans_token (Run.matcher_token v0),
                                              trans_member (Run.matcher_token v1)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                      v1
                                    ,
                                    Run.opt
                                      (fun v -> Run.trans_token (Run.matcher_token v))
                                      v2
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Rep_objl_COMMA_LBRACK_expr_RBRACK_COLON_expr_rep_COMMA_objl_opt_COMMA_fors_opt_comp (
                              (match v with
                              | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9] ->
                                  (
                                    Run.repeat
                                      (fun v ->
                                        (match v with
                                        | Seq [v0; v1] ->
                                            (
                                              trans_objlocal (Run.matcher_token v0),
                                              Run.trans_token (Run.matcher_token v1)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                      v0
                                    ,
                                    Run.trans_token (Run.matcher_token v1),
                                    trans_expr (Run.matcher_token v2),
                                    Run.trans_token (Run.matcher_token v3),
                                    Run.trans_token (Run.matcher_token v4),
                                    trans_expr (Run.matcher_token v5),
                                    Run.repeat
                                      (fun v ->
                                        (match v with
                                        | Seq [v0; v1] ->
                                            (
                                              Run.trans_token (Run.matcher_token v0),
                                              trans_objlocal (Run.matcher_token v1)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                      v6
                                    ,
                                    Run.opt
                                      (fun v -> Run.trans_token (Run.matcher_token v))
                                      v7
                                    ,
                                    trans_forspec (Run.matcher_token v8),
                                    Run.opt
                                      (fun v -> trans_compspec (Run.matcher_token v))
                                      v9
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (21, v) ->
                `Anon_func (
                  trans_anonymous_function (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `Assert_SEMI_expr (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_assert_ (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_expr (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (23, v) ->
                `Import (
                  trans_import (Run.matcher_token v)
                )
            | Alt (24, v) ->
                `Impo (
                  trans_importstr (Run.matcher_token v)
                )
            | Alt (25, v) ->
                `Expr_error (
                  trans_expr_error (Run.matcher_token v)
                )
            | Alt (26, v) ->
                `Expr_in_super (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_expr (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_super (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (27, v) ->
                `LPAR_expr_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expr (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expr_error ((kind, body) : mt) : CST.expr_error =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expr (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field ((kind, body) : mt) : CST.field =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_fiel_opt_PLUS_choice_COLON_expr (
            (match v with
            | Alt (0, v) ->
                `Fiel_opt_PLUS_choice_COLON_expr (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        trans_fieldname (Run.matcher_token v0),
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v1
                        ,
                        (match v2 with
                        | Alt (0, v) ->
                            `COLON (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `COLONCOLON (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `COLONCOLONCOLON (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        trans_expr (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Fiel_LPAR_opt_params_RPAR_choice_COLON_expr (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5] ->
                      (
                        trans_fieldname (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        Run.opt
                          (fun v -> trans_params (Run.matcher_token v))
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3),
                        (match v4 with
                        | Alt (0, v) ->
                            `COLON (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `COLONCOLON (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `COLONCOLONCOLON (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        trans_expr (Run.matcher_token v5)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fieldname ((kind, body) : mt) : CST.fieldname =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_id (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `LBRACK_expr_RBRACK (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expr (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_forspec ((kind, body) : mt) : CST.forspec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_id (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expr (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ifspec ((kind, body) : mt) : CST.ifspec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expr (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_bind ((kind, body) : mt) : CST.local_bind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_local (Run.matcher_token v0),
            trans_bind (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_bind (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_expr (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member ((kind, body) : mt) : CST.member =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Objl (
            trans_objlocal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Assert (
            trans_assert_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Field (
            trans_field (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_named_argument ((kind, body) : mt) : CST.named_argument =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_id (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expr (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_objlocal ((kind, body) : mt) : CST.objlocal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_local (Run.matcher_token v0),
            trans_bind (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_param ((kind, body) : mt) : CST.param =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id_opt_EQ_expr (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_id (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expr (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_params ((kind, body) : mt) : CST.params =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_param (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_param (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_document ((kind, body) : mt) : CST.document =
  match body with
  | Children v ->
      trans_expr (Run.matcher_token v)
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_document

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

